generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Task {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  description  String
  curentStatus String
  titre        String
  Subtasks     Subtask[]
  columnId     String    @db.ObjectId
  column       Column    @relation(fields: [columnId], references: [id])
}

model Subtask {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  taskId String @db.ObjectId
  task   Task   @relation(fields: [taskId], references: [id])
}

model Board {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  columns Column[]
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Column {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  boardId String @db.ObjectId
  board   Board  @relation(fields: [boardId], references: [id])
  Tasks   Task[]
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  board         Board[]

  @@map("users") 
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}